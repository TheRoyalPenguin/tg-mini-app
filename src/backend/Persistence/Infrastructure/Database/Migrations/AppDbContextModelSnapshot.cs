// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Persistence.Entities.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("book_author");

                    b.Property<string>("CoverKey")
                        .HasColumnType("text")
                        .HasColumnName("cover_key");

                    b.Property<string>("FileKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_key");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("book_title");

                    b.HasKey("Id")
                        .HasName("books_pkey");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("course_description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("course_title");

                    b.HasKey("Id")
                        .HasName("courses_pkey");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.EnrollmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("enrollment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("course_completion_date");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateOnly>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("enrollment_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<bool>("IsCourseCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_course_completed");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("enrollments_pkey");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId", "CourseId")
                        .IsUnique();

                    b.ToTable("enrollments", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.LongreadCompletionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("longread_completion_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LongreadId")
                        .HasColumnType("integer")
                        .HasColumnName("longread_id");

                    b.Property<int>("ModuleAccessId")
                        .HasColumnType("integer")
                        .HasColumnName("module_access_id");

                    b.HasKey("Id")
                        .HasName("longread_completions_pkey");

                    b.HasIndex("ModuleAccessId");

                    b.HasIndex("LongreadId", "ModuleAccessId")
                        .IsUnique();

                    b.ToTable("longread_completions", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.LongreadEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("longread_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioContentKey")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("longread_description");

                    b.Property<string>("HtmlContentKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("html_content_key");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<string>("OriginalDocxKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_docx_key");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("longread_title");

                    b.HasKey("Id")
                        .HasName("longreads_pkey");

                    b.HasIndex("ModuleId");

                    b.ToTable("longreads", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.LongreadImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_key");

                    b.Property<int>("LongreadEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("longread_id");

                    b.HasKey("Id")
                        .HasName("longread_images_pkey");

                    b.HasIndex("LongreadEntityId");

                    b.ToTable("longread_images", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.ModuleAccessEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("module_access_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("module_completion_date");

                    b.Property<bool>("IsModuleAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_module_available");

                    b.Property<bool>("IsModuleCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_module_completed");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int>("TestTriesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("test_tries_count");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("module_accesses_pkey");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "ModuleId")
                        .IsUnique();

                    b.ToTable("module_accesses", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.ModuleBookEntity", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.HasKey("ModuleId", "BookId")
                        .HasName("module_books_pkey");

                    b.HasIndex("BookId");

                    b.ToTable("module_books", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.ModuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("module_description");

                    b.Property<int>("LongreadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("module_longread_count");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("module_title");

                    b.HasKey("Id")
                        .HasName("modules_pkey");

                    b.HasIndex("CourseId");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("integer")
                        .HasColumnName("role_level");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoleLevel")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.TestResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CorrectAnswersCount")
                        .HasColumnType("integer");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalQuestionsCount")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WrongAnswersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("Persistence.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_banned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_first_name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_patronymic");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("user_phone_number");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_datetime");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("role_id");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_last_name");

                    b.Property<long>("TgId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_telegram_id");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("TgId")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("JsonKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("json_key");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("test_title");

                    b.HasKey("Id")
                        .HasName("tests_pkey");

                    b.HasIndex("ModuleId");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.EnrollmentEntity", b =>
                {
                    b.HasOne("Persistence.Entities.CourseEntity", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.UserEntity", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Entities.LongreadCompletionEntity", b =>
                {
                    b.HasOne("Persistence.Entities.LongreadEntity", "Longread")
                        .WithMany()
                        .HasForeignKey("LongreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.ModuleAccessEntity", "ModuleAccess")
                        .WithMany("LongreadCompletions")
                        .HasForeignKey("ModuleAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Longread");

                    b.Navigation("ModuleAccess");
                });

            modelBuilder.Entity("Persistence.Entities.LongreadEntity", b =>
                {
                    b.HasOne("Persistence.Entities.ModuleEntity", "Module")
                        .WithMany("Longreads")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_longreads_modules");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Persistence.Entities.LongreadImageEntity", b =>
                {
                    b.HasOne("Persistence.Entities.LongreadEntity", "Longread")
                        .WithMany("Images")
                        .HasForeignKey("LongreadEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_longreads");

                    b.Navigation("Longread");
                });

            modelBuilder.Entity("Persistence.Entities.ModuleAccessEntity", b =>
                {
                    b.HasOne("Persistence.Entities.ModuleEntity", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.UserEntity", "User")
                        .WithMany("ModuleAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Entities.ModuleBookEntity", b =>
                {
                    b.HasOne("Persistence.Entities.BookEntity", "Book")
                        .WithMany("ModuleBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_module_books_books");

                    b.HasOne("Persistence.Entities.ModuleEntity", "Module")
                        .WithMany("ModuleBooks")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_module_books_modules");

                    b.Navigation("Book");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Persistence.Entities.ModuleEntity", b =>
                {
                    b.HasOne("Persistence.Entities.CourseEntity", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Persistence.Entities.TestResultEntity", b =>
                {
                    b.HasOne("TestEntity", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Entities.UserEntity", b =>
                {
                    b.HasOne("Persistence.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TestEntity", b =>
                {
                    b.HasOne("Persistence.Entities.ModuleEntity", "Module")
                        .WithMany("Tests")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tests_modules");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Persistence.Entities.BookEntity", b =>
                {
                    b.Navigation("ModuleBooks");
                });

            modelBuilder.Entity("Persistence.Entities.CourseEntity", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Persistence.Entities.LongreadEntity", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Persistence.Entities.ModuleAccessEntity", b =>
                {
                    b.Navigation("LongreadCompletions");
                });

            modelBuilder.Entity("Persistence.Entities.ModuleEntity", b =>
                {
                    b.Navigation("Longreads");

                    b.Navigation("ModuleBooks");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Persistence.Entities.UserEntity", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("ModuleAccesses");
                });
#pragma warning restore 612, 618
        }
    }
}
